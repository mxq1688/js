{"ast":null,"code":"var _jsxFileName = \"/Users/meng/www/tp5/JS/react.js/myapp/src/component/TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoShow from './TodoShow';\n\nclass TodoList extends Component {\n  constructor(props) {\n    // 当组件的props state改变时，render就会重新执行\n    // 当父组件render运行时，子组件的render都会运行\n    super(props);\n    this.state = {\n      inputValue: '111',\n      list: ['hello']\n    };\n  }\n\n  handInputChange(e) {\n    // this.setState(parma1, param2) param1是对象或者函数（函数必须返回对象）， parma2是会回调函数\n    // this.setState({inputValue: e.target.value})\n    this.setState({\n      inputValue: this.refs.myinput.value\n    });\n  }\n\n  addList() {\n    //方法1\n    // var list = this.state.list;\n    // list.push(this.state.inputValue)\n    // this.setState({\n    //     list: list\n    // })\n    //方法2\n    // this.setState({\n    //     list: [...this.state.list, this.state.inputValue],\n    //     inputValue: ''\n    // })\n    //方法3\n    this.setState(m => {\n      // console.log(m);\n      // m.list.push(m.inputValue)\n      m.list = [...m.list, m.inputValue];\n      m.inputValue = '';\n      return m;\n    }); //箭头函数返回对象简写\n    // this.setState((m)=>({\n    //     list: [...m.list, m.inputValue],\n    //     inputValue: ''\n    // }))\n  }\n\n  deleteList(index) {\n    var list = this.state.list;\n    list.splice(index, 1);\n    this.setState({\n      list: list\n    });\n  } //代码拆分\n\n\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return React.createElement(Fragment, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(TodoItem, {\n        item: item,\n        index: index,\n        deleteItem: this.deleteList.bind(this, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    });\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: this.handInputChange.bind(this) // ref='myinput'\n      ,\n      ref: input => {\n        this.inputValue = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.addList.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"submit\")), React.createElement(TodoShow, {\n      content: this.state.inputValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.getTodoItem()));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/meng/www/tp5/JS/react.js/myapp/src/component/TodoList.js"],"names":["React","Component","Fragment","TodoItem","TodoShow","TodoList","constructor","props","state","inputValue","list","handInputChange","e","setState","refs","myinput","value","addList","m","deleteList","index","splice","getTodoItem","map","item","bind","render","input"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAgC;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;AACA;AACA,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,KADH;AAETC,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFG,KAAb;AAIH;;AACDC,EAAAA,eAAe,CAACC,CAAD,EAAG;AACd;AACA;AACA,SAAKC,QAAL,CAAc;AAACJ,MAAAA,UAAU,EAAE,KAAKK,IAAL,CAAUC,OAAV,CAAkBC;AAA/B,KAAd;AACH;;AACDC,EAAAA,OAAO,GAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKJ,QAAL,CAAeK,CAAD,IAAK;AACf;AACA;AACAA,MAAAA,CAAC,CAACR,IAAF,GAAS,CAAC,GAAGQ,CAAC,CAACR,IAAN,EAAYQ,CAAC,CAACT,UAAd,CAAT;AACAS,MAAAA,CAAC,CAACT,UAAF,GAAe,EAAf;AACA,aAAOS,CAAP;AACH,KAND,EAbK,CAoBL;AACA;AACA;AACA;AACA;AACH;;AACDC,EAAAA,UAAU,CAACC,KAAD,EAAO;AACb,QAAIV,IAAI,GAAG,KAAKF,KAAL,CAAWE,IAAtB;AACAA,IAAAA,IAAI,CAACW,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACA,SAAKP,QAAL,CAAc;AACVH,MAAAA,IAAI,EAAEA;AADI,KAAd;AAGH,GA/C2B,CAgD5B;;;AACAY,EAAAA,WAAW,GAAE;AACT,WAAO,KAAKd,KAAL,CAAWE,IAAX,CAAgBa,GAAhB,CAAoB,CAACC,IAAD,EAAOJ,KAAP,KAAe;AACtC,aACI,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAEI,IAAhB;AAAsB,QAAA,KAAK,EAAEJ,KAA7B;AAAoC,QAAA,UAAU,EAAE,KAAKD,UAAL,CAAgBM,IAAhB,CAAqB,IAArB,EAA2BL,KAA3B,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AASH,KAVM,CAAP;AAWH;;AACDM,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAO,MAAA,IAAI,EAAC,MAAZ;AACO,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWC,UADzB;AAEO,MAAA,QAAQ,EAAE,KAAKE,eAAL,CAAqBc,IAArB,CAA0B,IAA1B,CAFjB,CAGO;AAHP;AAIO,MAAA,GAAG,EAAIE,KAAD,IAAW;AAAE,aAAKlB,UAAL,GAAkBkB,KAAlB;AAAwB,OAJlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,EAMI;AAAQ,MAAA,OAAO,EAAE,KAAKV,OAAL,CAAaQ,IAAb,CAAkB,IAAlB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,CADJ,EAQI,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWC,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKa,WAAL,EADN,CATJ,CADJ;AAeH;;AA9E2B;;AAiFhC,eAAejB,QAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport TodoItem from './TodoItem'\nimport TodoShow from './TodoShow'\nclass TodoList extends Component{\n    constructor(props){\n        // 当组件的props state改变时，render就会重新执行\n        // 当父组件render运行时，子组件的render都会运行\n        super(props);\n        this.state = {\n            inputValue: '111',\n            list: ['hello'],\n        }\n    }\n    handInputChange(e){\n        // this.setState(parma1, param2) param1是对象或者函数（函数必须返回对象）， parma2是会回调函数\n        // this.setState({inputValue: e.target.value})\n        this.setState({inputValue: this.refs.myinput.value})\n    }\n    addList(){\n        //方法1\n        // var list = this.state.list;\n        // list.push(this.state.inputValue)\n        // this.setState({\n        //     list: list\n        // })\n        //方法2\n        // this.setState({\n        //     list: [...this.state.list, this.state.inputValue],\n        //     inputValue: ''\n        // })\n        //方法3\n        this.setState((m)=>{\n            // console.log(m);\n            // m.list.push(m.inputValue)\n            m.list = [...m.list, m.inputValue]\n            m.inputValue = '';\n            return m\n        })\n        //箭头函数返回对象简写\n        // this.setState((m)=>({\n        //     list: [...m.list, m.inputValue],\n        //     inputValue: ''\n        // }))\n    }\n    deleteList(index){\n        var list = this.state.list;\n        list.splice(index, 1)\n        this.setState({\n            list: list\n        })\n    }\n    //代码拆分\n    getTodoItem(){\n        return this.state.list.map((item, index)=>{\n            return (\n                <Fragment key={index}>\n                    {/*<li dangerouslySetInnerHTML={{__html: item}}>*/}\n\n                    {/*</li>*/}\n                    {/*<button onClick={this.deleteList.bind(this, index)}>X</button>*/}\n                    <TodoItem item={item} index={index} deleteItem={this.deleteList.bind(this, index)} />\n                </Fragment>\n            )\n        })\n    }\n    render() {\n        return (\n            <Fragment>\n                <div><input type=\"text\"\n                            value={this.state.inputValue}\n                            onChange={this.handInputChange.bind(this)}\n                            // ref='myinput'\n                            ref={ (input) => { this.inputValue = input} }\n                />\n                    <button onClick={this.addList.bind(this)}>submit</button></div>\n                <TodoShow content={this.state.inputValue} />\n                <ul>\n                    { this.getTodoItem() }\n                </ul>\n            </Fragment>\n        )\n    }\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}