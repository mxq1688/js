{"version":3,"sources":["mobx/TodoList.js","serviceWorker.js","index.js"],"names":["Todo","action","bound","title","Object","classCallCheck","this","id","Math","random","initializerDefineProperty","_descriptor","_descriptor2","finished","observable","store","list","unshift","filter","todo","length","computed","TodoList2","observer","state","inputValue","e","value","target","setState","prestate","createItem","props","react_default","a","createElement","react","type","onChange","handInputChange","bind","onClick","handSubmit","map","item","index","TodoList_TodoItem","key","left","Component","TodoItem","toggle","style","marginLeft","handClick","checked","TodoList","TodoList_TodoList2","Boolean","window","location","hostname","match","ReactDOM","render","mobx_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAOMA,KAODC,IAAOC,mBAHR,SAAAF,EAAYG,GAAOC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAAM,KAHnBC,GAAKC,KAAKC,SAGQL,OAAAM,EAAA,EAAAN,CAAAE,KAAA,QAAAK,EAAAL,MAAAF,OAAAM,EAAA,EAAAN,CAAAE,KAAA,WAAAM,EAAAN,MACdA,KAAKH,MAAQA,uDAGbG,KAAKO,UAAYP,KAAKO,qDANzBC,6EAAmB,4CACnBA,8EAAsB,gHAmBrBC,EAAQ,MATTd,IAAOC,2IAAiBC,GACrBG,KAAKU,KAAKC,QAAQ,IAAIjB,EAAKG,iCAG3B,OAAOG,KAAKU,KAAKE,OAAO,SAACC,GACrB,OAAQA,EAAKN,WACdO,kDAPNN,6EAAkB,sJAIlBO,yEASCC,EADLC,yNAQGC,MAAQ,CACJC,WAAY,mFAEAC,GACZ,IAAIC,EAAQD,EAAEE,OAAOD,MACrBrB,KAAKuB,SAAS,SAACC,GAEX,OADAA,EAASL,WAAaE,EACfG,yCAIXf,EAAMgB,WAAWzB,KAAKkB,MAAMC,YAC5BnB,KAAKuB,SAAS,SAACC,GAEX,OADAA,EAASL,WAAa,GACfK,qCAIX,IAAMf,EAAQT,KAAK0B,MAAMjB,MACzB,OACIkB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOV,MAAOrB,KAAKkB,MAAMC,WAAYa,SAAUhC,KAAKiC,gBAAgBC,KAAKlC,QACtF2B,EAAAC,EAAAC,cAAA,UAAQM,QAASnC,KAAKoC,WAAWF,KAAKlC,OAAtC,WACJ2B,EAAAC,EAAAC,cAAA,WAEQpB,EAAMC,KAAK2B,IAAI,SAACC,EAAKC,GACjB,OACIZ,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACW,EAAD,CAAUC,IAAKF,EAAOD,KAAMA,IAC5BX,EAAAC,EAAAC,cAAA,qBAOpBF,EAAAC,EAAAC,cAAA,WAAMpB,EAAMiC,cA3CJC,iBAiDlBC,sLASE5C,KAAK0B,MAAMY,KAAKO,0CAGhB,IAAMP,EAAOtC,KAAK0B,MAAMY,KACxB,OACIX,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUW,IAAKH,EAAKrC,IAChB0B,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAACC,WAAY,SACrBpB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWI,QAASnC,KAAKgD,UAAUd,KAAKlC,MAAOiD,QAASX,EAAK/B,WACzEoB,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAACC,WAAY,SAAUT,EAAKzC,gBAjBtC8C,aAgCRO,mLAJP,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,CAAW1C,MAAOA,WAHVkC,aC9FHS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAcC,SAASC,eAAe,SDoHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3738a074.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport 'antd/dist/antd.css'\nimport TodoListUi from '../tpl/TodoListUi'\nimport {observable, action, computed, ObservableMap} from 'mobx'\nimport PropTypes from 'prop-types'\nimport {observer, PropTypes as observablePropTypes} from 'mobx-react'\n\nclass Todo{\n    id = Math.random();\n    @observable title = '';\n    @observable finished = false;\n    constructor(title){\n        this.title = title;\n    }\n    @action.bound toggle(){\n        this.finished = !this.finished;\n    }\n}\nclass Store{\n    @observable list = [];\n    @action.bound createItem(title){\n        this.list.unshift(new Todo(title))\n    }\n    @computed get left(){\n        return this.list.filter((todo)=>{\n            return !todo.finished\n        }).length;\n    }\n}\nconst store = new Store();\n\n@observer\nclass TodoList2 extends Component{\n    static propTypes = {\n        store: PropTypes.shape({\n            createItem: PropTypes.func,\n            list: observablePropTypes.observableArrayOf(observablePropTypes.observableObject).isRequired\n        }).isRequired\n    }\n    state = {\n        inputValue: '',\n    }\n    handInputChange(e){\n        var value = e.target.value;\n        this.setState((prestate)=>{\n            prestate.inputValue = value\n            return prestate\n        });\n    }\n    handSubmit(){\n        store.createItem(this.state.inputValue)\n        this.setState((prestate)=>{\n            prestate.inputValue = ''\n            return prestate\n        });\n    }\n    render(){\n        const store = this.props.store;\n        return (\n            <Fragment>\n                <div><input type=\"text\" value={this.state.inputValue} onChange={this.handInputChange.bind(this)}/>\n                    <button onClick={this.handSubmit.bind(this)}>addSub</button></div>\n                <div>\n                    {\n                        store.list.map((item,index)=>{\n                            return(\n                                <Fragment>\n                                    <TodoItem key={index} item={item}/>\n                                    <span>X</span>\n                                </Fragment>\n                            )\n\n                        })\n                    }\n                </div>\n                <div>{store.left}</div>\n            </Fragment>\n        )\n    }\n}\n\nclass TodoItem extends Component{\n    static propTypes = {\n        item: PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            finished: PropTypes.bool.isRequired,\n        })\n    };\n    handClick(){\n        this.props.item.toggle();\n    }\n    render(){\n        const item = this.props.item;\n        return (\n            <Fragment key={item.id}>\n                <div style={{marginLeft: '10px'}}>\n                    <input type=\"checkbox\" onClick={this.handClick.bind(this)} checked={item.finished}/>\n                    <span style={{marginLeft: '10px'}}>{item.title}</span>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\n\nclass TodoList extends Component{\n\n    render(){\n        return <TodoList2 store={store}/>\n    }\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import TodoList from './component/TodoList';\n// import Transition from './component/Transition'\n// import TodoList from './antd/TodoList'\n\nimport TodoList from './mobx/TodoList'\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}